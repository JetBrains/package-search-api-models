openapi: 3.0.0
info:
  description: JetBrains Package Search API
  version: "1.0.0"
  title: JetBrains Package Search API
  termsOfService: 'https://plugins.jetbrains.com/legal/terms-of-use'
  contact:
    email: support@jetbrains.com
tags:
  - name: package
    description: Package resource
  - name: idea
    description: IntelliJ IDEA-specific resource
paths:
  '/package/{id}':
    get:
      tags:
        - package
      summary: Find package by Maven coordinates
      description: Returns a single package with the given `groupId:artifactId` coordinates, if any.
      operationId: getPackageById
      parameters:
        - name: id
          in: path
          description: >-
            GroupId and ArtifactId of the package. E.g., `org.jetbrains:package-search`.
          required: true
          schema:
            type: string
            pattern: '^([\w.\-]+):([\w.\-]+)$'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.minimal:
              schema:
                $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.standard:
              schema:
                $ref: '#/components/schemas/Package'
        '400':
          description: Empty or invalid ID, should be in `groupId:artifactId` format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No package found with the given coordinates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/package#range':
    get:
      tags:
        - package
      summary: Find a range of packages by their Maven coordinates
      description: Returns a collection of packages that match the provided Maven coordinates (a comma-separated list of `groupId:artifactId`).<br />The result will contain _at most_ the same number of items as the number of IDs provided in the request, but may contain less, if any of the IDs have no matches.<br />Note that if none of the provided IDs match you will get an HTTP 200 response with an empty array of results.
      operationId: getPackagesByRange
      parameters:
        - name: range
          in: query
          description: Range of package coordinates; max. 25 items in a `groupId:artifactId` format, comma-separated. E.g., `com.jetbrains:my-package,com.jetbrains:another-package`
          required: true
          schema:
            type: array
            items:
              type: string
              pattern: '^([\w.\-]+):([\w.\-]+)$'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.minimal:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.standard:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Package'
        '400':
          description: Either no non-blank IDs were passed, or more than 25 IDs non-blank IDs were passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/package#search':
    get:
      tags:
        - package
      summary: Search for packages by query (fulltext search)
      description: Returns a collection of packages matching the provided query in any of their fields. If the query only contains Maven coordinates, the service will prioritise exact matches of the coordinates.
      operationId: searchPackages
      parameters:
        - name: query
          in: query
          description: Search query, must not be null or blank.
          required: true
          schema:
            type: string
        - name: onlyStable
          in: query
          description: When true, only packages containing stable versions will be returned. Default value `false`.
          required: false
          schema:
            type: boolean
        - name: includeMPPChild
          in: query
          description: When true, mpp child artifacts (platfrom specific) will be included in search results. Default value `false`.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.minimal:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.standard:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Package'
        '400':
          description: The query parameter must not be blank.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/package#hash':
    get:
      tags:
        - package
      summary: Find a package by hash
      description: Returns a matching package, by looking for the provided hash in all packages' versions.<br />**⚠ Don't specify both md5 and sha1 at the same time, the behaviour is not defined. ⚠**
      operationId: getPackagesByHash
      parameters:
        - name: sha1
          in: query
          description: SHA1 hash of the package to find.
          required: false
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{40}$"
        - name: md5
          in: query
          description: MD5 hash of the package to find.
          required: false
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{32}$"
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.minimal:
              schema:
                $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.standard:
              schema:
                $ref: '#/components/schemas/Package'
        '400':
          description: The provided hash is empty or doesn't look like it's a valid hash.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No package found with the given hash.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/package#suggest':
    get:
      tags:
        - package
      summary: Get suggested packages
      description: Returns a collection of suggested packages. At least one of `groupId` and `artifactId` is required to be non-blank.
      operationId: suggestPackages
      parameters:
        - name: artifactId
          in: query
          description: ArtifactId to use for suggestions.
          required: false
          schema:
            type: string
        - name: groupId
          in: query
          description: GroupId to use for suggestions.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
            application/json+org.jetbrains.packagesearch.minimal:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
        '400':
          description: At least one of the groupId and artifactId parameters is required to be non-blank.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '415':
          description: Unsupported content type — this endpoint only supports minimal format responses.
          content:
            application/json+org.jetbrains.packagesearch.standard:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/search/idea/fulltext':
    get:
      tags:
        - idea
      summary: Full text search (for IDEA)
      description: Returns a collection of packages matching the query.
      operationId: ideaSearch
      parameters:
        - name: query
          in: query
          description: Query to search for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
        '400':
          description: The query parameter must not be missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/search/idea/suggest':
    get:
      tags:
        - idea
      summary: Full text search (for IDEA)
      description: Returns a collection of packages suggestions; either artifactId or groupId is required (can be blank).
      operationId: ideaSuggest
      parameters:
        - name: groupId
          in: query
          description: GroupId to use for suggestions.
          required: false
          schema:
            type: string
        - name: artifactId
          in: query
          description: ArtifactId to use for suggestions.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinimalPackage'
        '400':
          description: 'At least one of groupId and artifactId is required.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
servers:
  - url: 'https://package-search.services.jetbrains.com/api'
components:
  schemas:
    Package:
      type: object
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        packaging:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri
        scm:
          $ref: '#/components/schemas/Scm'
        mpp:
          $ref: '#/components/schemas/MPPData'
        platforms:
          type: array
          items:
            $ref: '#/components/schemas/Platform'
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        latestVersion:
          $ref: '#/components/schemas/Version'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/Version'
        dependencyRating:
          type: number
          format: float
          default: 0
        github:
          $ref: '#/components/schemas/GitHub'
        stackoverflow:
          $ref: '#/components/schemas/StackOverflowTags'
      required:
        - groupId
        - artifactId
        - versions
        - name
        - latestVersion
        - dependencyRating
    MPPData:
      type: object
      properties:
        module_type:
          type: string
    Platform:
      type: object
      properties:
        type:
          type: string
        targets:
          type: array
          items:
            type: string
    Scm:
      type: object
      properties:
        url:
          type: string
          format: uri
        connection:
          type: string
        developerConnection:
          type: string
    Author:
      type: object
      properties:
        name:
          type: string
        org:
          type: string
        orgUrl:
          type: string
          format: uri
    Version:
      type: object
      properties:
        version:
          type: string
        sha1:
          type: string
        md5:
          type: string
        stable:
          type: boolean
        packaging:
          type: string
        updated:
          type: number
          format: int64
          default: 0
      required:
        - version
    GitHub:
      type: object
      properties:
        description:
          type: string
        url:
          type: string
        isFork:
          type: boolean
        stars:
          type: number
          format: int64
          default: 0
        watches:
          type: number
          format: int64
          default: 0
        forks:
          type: number
          format: int64
          default: 0
        subscribers:
          type: number
          format: int64
          default: 0
        network:
          type: number
          format: int64
          default: 0'
        community_profile:
          $ref: '#/components/schemas/GitHubCommunityProfile'
        updated:
          type: number
          format: int64
          default: 0
      required:
        - url
    GitHubCommunityProfile:
      type: object
      properties:
        description:
          type: string
        files:
          $ref: '#/components/schemas/GitHubCommunityProfileFiles'
        documentation:
          type: string
          format: uri
        health_percentage:
          type: number
          format: int32
    GitHubCommunityProfileFiles:
      type: object
      properties:
        license:
          $ref: '#/components/schemas/GitHubCommunityProfileFile'
        readme:
          $ref: '#/components/schemas/GitHubCommunityProfileFile'
        code_of_conduct:
          $ref: '#/components/schemas/GitHubCommunityProfileFile'
    GitHubCommunityProfileFile:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        spdx_id:
          type: string
    StackOverflowTags:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/StackOverflowTag'
    StackOverflowTag:
      type: object
      properties:
        tag:
          type: string
        count:
          type: number
          format: int32
      required:
        - tag
        - count
    MinimalPackage:
      type: object
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/MinimalVersion'
      required:
        - groupId
        - artifactId
        - versions
    MinimalVersion:
      type: object
      properties:
        version:
          type: string
      required:
        - version
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
